openapi: 3.0.1
info:
  title: szirine-api
  version: 1.0.0
servers:
- url: ///api
tags:
- name: Post
paths:
  /Posts:
    get:
      tags:
      - Post
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Post.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
          - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See
          https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
          for more details.
        schema:
          type: string
          format: JSON
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
      deprecated: false
    put:
      tags:
      - Post
      summary: Replace an existing model instance or insert a new one into the data
        source.
      operationId: Post.replaceOrCreate__put_Posts
      requestBody:
        description: Model instance data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: false
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      deprecated: false
    post:
      tags:
      - Post
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Post.create
      requestBody:
        description: Model instance data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: false
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      deprecated: false
  /Posts/{id}:
    get:
      tags:
      - Post
      summary: Find a model instance by {{id}} from the data source.
      operationId: Post.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        schema:
          type: string
          format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include - must be a JSON-encoded string
          ({"something":"value"})
        schema:
          type: string
          format: JSON
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      deprecated: false
    put:
      tags:
      - Post
      summary: Replace attributes for a model instance and persist it into the data
        source.
      operationId: Post.replaceById__put_Posts_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        schema:
          type: string
          format: JSON
      requestBody:
        description: Model instance data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: false
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      deprecated: false
    delete:
      tags:
      - Post
      summary: Delete a model instance by {{id}} from the data source.
      operationId: Post.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        schema:
          type: string
          format: JSON
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                type: object
      deprecated: false
components:
  schemas:
    Post:
      required:
      - publicationDate
      - text
      - title
      type: object
      properties:
        id:
          type: number
          format: double
        title:
          type: string
        subtitle:
          type: string
        publicationDate:
          type: string
          format: date-time
        thumbnail:
          type: string
        text:
          type: string
        userId:
          type: number
          format: double
